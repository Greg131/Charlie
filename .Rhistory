strs <- c("smith","smit","smoth","snith","snoth")
# using R default adist()
adist(strs,"smith")
strs <- c("Aiguilles","Aiguille","Agouille","snith","snoth")
# using R default adist()
adist(strs,"aguille")
adist(strs,"aiguilles")
?adist
adist(strs,strs)
library(stringdist)
install.packages("stringdist")
library(stringdist)
stringdist("aiguilles",strs,method="lv")
stringdist(strs,"aiguilles",method="lv")
?stringdist()
strs <- c("Charly","Sharly","Charlie","charlie","sharlie")
# using R default adist()
adist(strs,"Charly")
strs <- c("Charly","Sharly","Charlie","charlie","sharlie","scharli","ssarlly")
# using R default adist()
adist(strs,"Charly")
adist(strs,strs)
stringdist("Charly",strs,method="lv")
stringdist(strs,"Charly",method="lv")
stringdist(strs,"Charly",method="osa")
stringdist(strs,"Charly",method="dl")
stringdist(strs,"Charly",method="hamming")
stringdist(strs,"Charly",method="lcs")
stringdist(strs,"Charly",method="lcs")
stringdist(strs,"Charly",method="jaccard") # ?
stringdist(strs,"Charly",method="jw") # ?
stringdist(strs,"Charly",method="soundex") # ?
stringdist(strs,"Charly",method="qgram") # ?
stringdist("Charly",strs,method="lv")
stringdist(strs,"Charly",method="lv")
stringdist(strs,"Charly",method="osa")
stringdist(strs,"Charly",method="dl")
stringdist(strs,"Charly",method="hamming") # pas adapté
stringdist(strs,"Charly",method="qgram") # ?
stringdist(strs,"Charly",method="qgram",q=2) # ?
stringdist(strs,"Charly",method="qgram",q=3) # ?
stringdist(strs,"Charly",method="qgram",q=2) # ?
stringdist(strs,"Charly",method="qgram",q=3) # ?
stringdist(strs,"Charly",method="qgram",q=1) # ?
stringdist("Charly",strs,method="lv")
stringdist(strs,"Charly",method="qgram",q=1) # ?
stringdist(strs,"Charly",method="lcs") # ?
stringdist(strs,"Charly",method="jaccard",q=2) # ?
stringdist(strs,"Charly",method="jw",p=0.1) # ?
stringdist(strs,"Charly",method="soundex") # ?
# ----------------------------------------------------------
# Datathon SNCF Simplon - Sujet 4 : "Où est Charlie?"
# ----------------------------------------------------------
setwd("~/Dropbox/Datascience/Datathon Simplon.co x SNCF/Scripts")
setwd("~/Dropbox/Datascience/Datathon Simplon.co x SNCF/charlie")
getwd() # Get working directory
if (!file.exists("../data"))       {
dir.create("../data")
}
# Les fichiers de données sont supposés être dans ../data
? read.csv
# Lecture des fichiers
Fonctions_AS_IdF <- read.csv("../data/Fonctions_AS_Idf.csv", fileEncoding = "UTF-16LE",sep = "\t")
str(Fonctions_AS_IdF)
Liste_AVP <- read.csv("../data/Liste_AVP.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_CTV <- read.csv("../data/Liste_CTV.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_EALE <- read.csv("../data/Liste_EALE.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_Postes <- read.csv("../data/Liste_Postes.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_SAF_ADM <- read.csv("../data/Liste_SAF_ADM.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_Sous_Stations_SE <- read.csv("../data/Liste_Sous_Stations_SE.csv",fileEncoding = "UTF-16LE",sep = "\t")
Liste_Zones_Cdv <- read.csv("../data/Liste_Zones_Cdv.csv",fileEncoding = "UTF-16LE",sep = "\t")
PI_TAG <- read.csv("../data/PI_TAG DCT.csv", sep = ";",check.names = FALSE)
#PI_TAG2 <- read.csv("../data/PI_TAG DCT.csv", sep = ";",header = FALSE, skip = 1)
# pb dans les noms de variables à régler
Referentiel_geomocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";")
REX_SIG <- read.csv("../data/REX SIG.csv", sep = ";",check.names = FALSE)
REX_Incidents <- read.csv("../data/REX_Incidents.csv", sep = ";",check.names = FALSE)
summary(Referentiel_geomocalisation)
str(Referentiel_geomocalisation)
?read.csv
Referentiel_geomocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";",
colClasses = c("int","int","numeric","numeric"))
?read.csv
Referentiel_geomocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";", dec = ",",
colClasses = c("int","int","numeric","numeric"))
summary(Referentiel_geomocalisation)
str(Referentiel_geomocalisation)
Referentiel_geomocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";", dec = ",",
colClasses = c("integer","integer","numeric","numeric"))
View(Referentiel_geomocalisation)
Referentiel_geolocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";", dec = ",",
colClasses = c("integer","integer","numeric","numeric"))
View(Referentiel_geolocalisation)
Referentiel_geolocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";", dec = ",",
colClasses = c("integer","integer","numeric","numeric"))
summary(Referentiel_geomocalisation)
summary(Referentiel_geolocalisation)
str(Referentiel_geomocalisation)
summary(Referentiel_geolocalisation)
head(Referentiel_geolocalisation)
tail(Referentiel_geolocalisation)
summary(Referentiel_geolocalisation)
str(Referentiel_geomocalisation)
str(Referentiel_geolocalisation)
summary(Referentiel_geolocalisation)
Referentiel_geolocalisation[Referentiel_geolocalisation$LIGNE=1000]
Referentiel_geolocalisation[Referentiel_geolocalisation$LIGNE == 1000]
Referentiel_geolocalisation[Referentiel_geolocalisation$LIGNE == 1000,]
lambert <- function(ligne, Voie, PK) {
X <- Referentiel_geolocalisation[Referentiel_geolocalisation$LIGNE == ligne,]
Y <- 0
X
}
lambert(1000)
lambert(2000)
length(Referentiel_geolocalisation)
nrow(Referentiel_geolocalisation)
Ref <- subset(Referentiel_geolocalisation, LIGNE == 1000)
View(Ref)
View(Ref)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, LIGNE == 1000 & (PK - pk) < 100)
Ref
}
lambert(2000,10000)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, LIGNE == 1000 && (PK - pk) < 100)
Ref
}
lambert(2000,10000)
lambert(2000,1000)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == 1000) && (PK - pk) < 100)
Ref
}
lambert(2000,1000)
Ref <- subset(Referentiel_geolocalisation, (LIGNE == 1000) & (PK - pk) < 100)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == 1000) & (PK - pk) < 100)
Ref
}
lambert(2000,1000)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne) & (PK - pk) < 100)
Ref
}
lambert(2000,1000)
lambert(1000,1000)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne) & (PK ) < 100)
Ref
}
lambert(1000,1000)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne) & (PK ) < 1000)
Ref
}
lambert(1000,1000)
?abs()
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne) & abs(PK - pk ) < 1000)
Ref
}
?abs()
lambert(1000,1000)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne) & abs(PK - pk ) < 500)
Ref
}
?abs()
lambert(1000,1000)
lambert(2000,1000)
lambert(2000,10000)
lambert(1000,10000)
lambert(1000,100)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne) & abs(PK - pk ) < 250)
Ref
}
?abs()
lambert(1000,1000)
lambert(1000,100)
Ref <- subset(Referentiel_geolocalisation, (LIGNE == 1000))
Ref$dist <- abs(Ref$PK-100)
View(Ref)
Ref[which.min(Ref$dist), ]
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$dist <- abs(Ref$PK-pk)
Ref[which.min(Ref$dist), ]
}
lambert(1000,1000)
lambert(1000,100)
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$dist <- abs(Ref$PK-pk)
Ref[which.min(Ref$distance), ]
}
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
# ----------------------------------------------------------
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
View(Liste_PN)
str(Liste_PN)
Liste_PN_voisins <- Liste_PN
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_PN)
Liste_PN$X <- lambert(Liste_PN$LIGNE,Liste_PN$PK)$X # Ajout des coordonnées de lambert approchés
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$dist <- abs(Ref$PK-pk)
Ref[which.min(Ref$distance), ]
}
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
Referentiel_geolocalisation <- read.csv("../data/Referentiel geolocalisation.csv", sep = ";", dec = ",",
colClasses = c("integer","integer","numeric","numeric"))
head(Referentiel_geolocalisation)
tail(Referentiel_geolocalisation)
summary(Referentiel_geolocalisation)
str(Referentiel_geolocalisation)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$dist <- abs(Ref$PK-pk)
Ref[which.min(Ref$distance), ]
}
a <- lambert(1000,1000)
b <- lambert(1000,100)
Ref <- subset(Referentiel_geolocalisation, (LIGNE == 1000))
Ref$dist <- abs(Ref$PK-1000)
View(Ref)
Ref[which.min(Ref$distance), ]
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$distance <- abs(Ref$PK-pk)
Ref[which.min(Ref$distance), ]
}
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_PN)
Liste_PN$X <- lambert(Liste_PN$LIGNE,Liste_PN$PK)$X # Ajout des coordonnées de lambert approchés
nrow(Liste_PN)
seq_len(nrow(Liste_PN)) # cree une sequense de longueur specifiee
Liste_PN[1]
Liste_PN[,1]
Liste_PN[1,]
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_PN)
for (i in 1:5)) {
Liste_PN[1,]$X <- lambert(Liste_PN[1,]$LIGNE,Liste_PN[1,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[1,]$Y <- lambert(Liste_PN[1,]$LIGNE,Liste_PN[1,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
for (i in 1:5) {
Liste_PN[1,]$X <- lambert(Liste_PN[1,]$LIGNE,Liste_PN[1,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[1,]$Y <- lambert(Liste_PN[1,]$LIGNE,Liste_PN[1,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
Liste_PN$X <- 0
Liste_PN$Y <- 0
nrow(Liste_PN)
for (i in 1:5) {
Liste_PN[1,]$X <- lambert(Liste_PN[1,]$LIGNE,Liste_PN[1,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[1,]$Y <- lambert(Liste_PN[1,]$LIGNE,Liste_PN[1,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
View(Liste_PN)
nrow(Liste_PN)
nrow(Liste_PN)
for (i in 1:5) {
Liste_PN[i,]$X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
View(Ref)
View(Liste_PN)
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_PN)
nrow(Liste_PN)
for (i in 1:5) {
Liste_PN[i,]$X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_PN)
Liste_PN$X <- 0
Liste_PN$Y <- 0
nrow(Liste_PN)
for (i in 1:5) {
Liste_PN[i,]$X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
for (i in seq_len(nrow(Liste_PN))) {
Liste_PN[i,]$X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
View(Ref)
View(Liste_PN)
for (i in 1:5) {
Liste_PN[i,]$X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
for (i in 1:50) {
Liste_PN[i,]$X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$Y # Ajout des coordonnées de lambert approchés
}
for (i in seq_len(nrow(Liste_PN))) {
X <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)
}
for (i in seq_len(nrow(Liste_PN))) {
lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
}
a
for (i in 1:50) {
lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
}
for (i in 1:50) {
test <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
test
}
for (i in 1:50) {
test <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
print(test)
}
for (i in seq_len(nrow(Liste_PN))) {
test <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
print(test)
}
for (i in seq_len(nrow(Liste_PN))) {
test <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
print(i) ; print(test)
}
for (i in seq_len(nrow(Liste_PN))) {
}
for (i in 1:100) {
test <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
print(i) ; print(test)
}
View(Liste_PN)
lambert(963506,3671)
nrow(lambert(963506,3671))
for (i in seq_len(nrow(Liste_PN))) {
lambert <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)
if (nrow(lambert) == 1) {
Liste_PN[i,]$X <- lambert$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert$Y # Ajout des coordonnées de lambert approchés
} else { # cas ou l'on n'a pas trouvé de coord lambert ....
Liste_PN[i,]$X <- 0
Liste_PN[i,]$Y <- 0
}
}
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$distance <- abs(Ref$PK-pk)
Ref[which.min(Ref$distance), ]
}
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
a
Liste_PN <- read.csv("../data/Liste_PN.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_PN)
Liste_PN$X <- 0
Liste_PN$Y <- 0
for (i in 1:100) {
test <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)$distance
print(i) ; print(test)
}
lambert(963506,3671)
nrow(lambert(963506,3671))
for (i in seq_len(nrow(Liste_PN))) {
lambert <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)
if (nrow(lambert) == 1) {
Liste_PN[i,]$X <- lambert$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lambert$Y # Ajout des coordonnées de lambert approchés
} else { # cas ou l'on n'a pas trouvé de coord lambert ....
Liste_PN[i,]$X <- 0
Liste_PN[i,]$Y <- 0
}
}
lambert(963506,3671)
lambert <- function(ligne, pk) {
Ref <- subset(Referentiel_geolocalisation, (LIGNE == ligne))
Ref$distance <- abs(Ref$PK-pk)
Ref[which.min(Ref$distance), ]
}
a <- lambert(1000,1000)
b <- lambert(1000,100)
a$X
b$Y
a
lambert(963506,3671)
for (i in seq_len(nrow(Liste_PN))) {
lamb <- lambert(Liste_PN[i,]$LIGNE,Liste_PN[i,]$PK)
if (nrow(lamb) == 1) {
Liste_PN[i,]$X <- lamb$X # Ajout des coordonnées de lambert approchés
Liste_PN[i,]$Y <- lamb$Y # Ajout des coordonnées de lambert approchés
} else { # cas ou l'on n'a pas trouvé de coord lambert ....
Liste_PN[i,]$X <- 0
Liste_PN[i,]$Y <- 0
}
}
View(Liste_PN)
Liste_PN_voisins <- function(X, Y, rayon = 500) {
Liste_PN_voisins <- Liste_PN
# Calcul et ajout de la distance euclidienne
Liste_PN_voisins$distance <- sqrt((Liste_PN_voisins$X-X)^2+(Liste_PN_voisins$Y-Y)^2)
Liste_PN_voisins <- subset(Liste_PN_voisins, distance < rayon)
Liste_PN_voisins
}
View(Liste_PN)
View(Liste_PN)
View(Liste_PN)
Liste_PN_voisins(586796.1,6816543,200)
Liste_PN_voisins(586796.1,6816543,2000)
Liste_AVP <- read.csv("../data/Liste_AVP.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_AVP)
nrow(Liste_AVP)
Liste_AVP <- read.csv("../data/Liste_AVP.csv",fileEncoding = "UTF-16LE",sep = "\t")
str(Liste_AVP)
Liste_AVP$X <- 0
Liste_AVP$Y <- 0
nrow(Liste_AVP)
for (i in seq_len(nrow(Liste_AVP))) {
lamb <- lambert(Liste_AVP[i,]$LIGNE,Liste_AVP[i,]$PK)
if (nrow(lamb) == 1) {
Liste_AVP[i,]$X <- lamb$X # Ajout des coordonnées de lambert approchés
Liste_AVP[i,]$Y <- lamb$Y # Ajout des coordonnées de lambert approchés
} else { # cas ou l'on n'a pas trouvé de coord lambert ....
Liste_AVP[i,]$X <- 0
Liste_AVP[i,]$Y <- 0
}
}
Liste_AVP_voisins <- function(X, Y, rayon = 500) {
Liste_AVP_voisins <- Liste_AVP
# Calcul et ajout de la distance euclidienne
Liste_AVP_voisins$distance <- sqrt((Liste_AVP_voisins$X-X)^2+(Liste_AVP_voisins$Y-Y)^2)
Liste_AVP_voisins <- subset(Liste_PN_voisins, distance < rayon)
Liste_AVP_voisins
}
Liste_AVP_voisins(586796.1,6816543,2000)
Liste_AVP_voisins <- function(X, Y, rayon = 500) {
Liste_AVP_voisins <- Liste_AVP
# Calcul et ajout de la distance euclidienne
Liste_AVP_voisins$distance <- sqrt((Liste_AVP_voisins$X-X)^2+(Liste_AVP_voisins$Y-Y)^2)
Liste_AVP_voisins <- subset(Liste_AVP_voisins, distance < rayon)
Liste_AVP_voisins
}
Liste_AVP_voisins(586796.1,6816543,2000)
Liste_AVP_voisins(586796.1,6816543,200)
Liste_AVP_voisins(586796.1,6816543,20)
Liste_AVP_voisins(586796.1,6816543,50)
Liste_AVP_voisins(586796.1,6816543,500)
Liste_AVP_voisins(586796.1,6816543,200)
Liste_PN_voisins(586796.1,6816543,2000)
Liste_PN_voisins(586796.1,6816543,200)
str(REX_Incidents)
REX_Incidents <- read.csv("../data/REX_Incidents.csv", sep = ";",check.names = FALSE)
str(REX_Incidents)
str(REX_Incidents)
REX_Incidents[1,]
REX_Incidents[1,]$PK
REX_Incidents[1,]$LIGNE
REX_Incidents[1,]$PK
lamb <- lambert(REX_Incidents[1,]$LIGNE,REX_Incidents[1,]$PK)
View(lamb)
Liste_AVP_voisins(586796.1,6816543,200)
Liste_PN_voisins(586796.1,6816543,200)
Liste_AVP_voisins(lamb$X,lamb$Y,200)
Liste_PN_voisins(lamb$X,lamb$Y,200)
lamb <- lambert(REX_Incidents[1,]$LIGNE,REX_Incidents[1,]$PK)
AVP <- Liste_AVP_voisins(lamb$X,lamb$Y,200)
PN <- Liste_PN_voisins(lamb$X,lamb$Y,200)
print("Nombre d'apareils de voie voisins: ", nrow(AVP))
print("Nombre de passages à niveau voisins: ", nrow(PN))
nrow(AVP)
nrow(PN)
print(paste("Nombre d'apareils de voie voisins: ", nrow(AVP)))
print(paste ("Nombre de passages à niveau voisins: ", nrow(PN)))
print(paste("Incident : ", 1)
print(paste("Incident : ", 1))
print(paste("Incident : ", 1))
print(paste("Nombre d'apareils de voie voisins: ", nrow(AVP)))
print(paste ("Nombre de passages à niveau voisins: ", nrow(PN)))
for (i in 1:10) {
lamb <- lambert(REX_Incidents[i,]$LIGNE,REX_Incidents[i,]$PK)
AVP <- Liste_AVP_voisins(lamb$X,lamb$Y,200)
PN <- Liste_PN_voisins(lamb$X,lamb$Y,200)
nrow(AVP)
nrow(PN)
print(paste("Incident : ", i))
print(paste("Nombre d'apareils de voie voisins: ", nrow(AVP)))
print(paste ("Nombre de passages à niveau voisins: ", nrow(PN)))
}
